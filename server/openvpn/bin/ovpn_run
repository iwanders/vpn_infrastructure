#!/bin/bash

set -ex

VPNLAN='172.30.2'

# Example config from openvpn
# https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/server.conf
CONF="/etc/openvpn/server.conf"
# At commit bde1b90da0db2d68d13d274102986f0ca7096c00
# lines commented out prefixed with '#~'

# Make the VPN the default gateway for the clients.
echo 'push "redirect-gateway def1 bypass-dhcp"' >> $CONF

# Push a DNS that can be reached over the vpn.
# This is required in case the clients' current DNS only allows requests from a
# specific ip range, which usually does not include the server.
echo 'push "dhcp-option DNS 8.8.8.8"' >> $CONF

# Allow client-client communication
echo 'client-to-client' >> $CONF

# Enable compression.
echo 'comp-lzo' >> $CONF

# Ensure the vpn clients are aware that they can now reach
# the tinc network.
echo 'push "route 172.30.0.0 255.255.0.0"' >> $CONF

# Ensure that all traffic aimed at the tinc subnet goes to the ip that runs
# the tinc deamon on this network. So anything to 172.30.0.0/12 has $VPNLAN.21
# as its gateway.
ip route add 172.30.0.0/16 via $VPNLAN.1 dev eth0

# Ensure the connected VPN clients have NAT.
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables -t nat -A POSTROUTING -s $VPNLAN.128/25 -j MASQUERADE

# Here, we do a bit of a hack, but the eth0 interface (provided by dockerlan) sets
# the entire ${VPNLAN}.0/24 subrange. But wireguard is on ${VPNLAN}.64/26, openvpn is on
# ${VPNLAN}.128/26 and ${VPNLAN}.192/26, so to allow inter-client communication we need
# to ensure that only ${VPNLAN}.0/26 goes to eth0. Source ip is passed in as $2.
ip route del ${VPNLAN}.0/24
ip route add ${VPNLAN}.0/26 dev eth0 scope link src $2

if [ $1 == '--https' ]; then
    # Place https range in 128-192
    echo "server $VPNLAN.128 255.255.255.224" >> $CONF
    echo 'port 443' >> $CONF
    echo 'proto tcp' >> $CONF
fi

if [ $1 == '--udp' ]; then
    # Place UDP range in 192 - 256
    echo "server $VPNLAN.192 255.255.255.224" >> $CONF
    echo 'port 1194' >> $CONF
    echo 'proto udp' >> $CONF
fi

openvpn --config "$CONF"
echo "Call with either https or udp as argument."